<?xml version='1.0' encoding='UTF-8'?>
<DEFECTS><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>68</LINE><COLUMN>10</COLUMN></SFA><DEFECTCODE>6340</DEFECTCODE><DESCRIPTION>符号不匹配:  已将“unsigned long”作为 _Param_(3) 传递，但需要使用一些 signed 类型来调用“_swprintf”。</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnInitDialog</FUNCTION><DECORATED>?OnInitDialog@CDlgInitVacTst@@UAEHXZ</DECORATED><FUNCLINE>49</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>68</LINE><COLUMN>10</COLUMN></SFA><DEFECTCODE>6340</DEFECTCODE><DESCRIPTION>符号不匹配:  已将“unsigned long”作为 _Param_(4) 传递，但需要使用一些 signed 类型来调用“_swprintf”。</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnInitDialog</FUNCTION><DECORATED>?OnInitDialog@CDlgInitVacTst@@UAEHXZ</DECORATED><FUNCLINE>49</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>68</LINE><COLUMN>10</COLUMN></SFA><DEFECTCODE>6340</DEFECTCODE><DESCRIPTION>符号不匹配:  已将“unsigned long”作为 _Param_(5) 传递，但需要使用一些 signed 类型来调用“_swprintf”。</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnInitDialog</FUNCTION><DECORATED>?OnInitDialog@CDlgInitVacTst@@UAEHXZ</DECORATED><FUNCLINE>49</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>74</LINE><COLUMN>10</COLUMN></SFA><DEFECTCODE>6340</DEFECTCODE><DESCRIPTION>符号不匹配:  已将“unsigned long”作为 _Param_(3) 传递，但需要使用一些 signed 类型来调用“_swprintf”。</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnInitDialog</FUNCTION><DECORATED>?OnInitDialog@CDlgInitVacTst@@UAEHXZ</DECORATED><FUNCLINE>49</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>74</LINE><COLUMN>10</COLUMN></SFA><DEFECTCODE>6340</DEFECTCODE><DESCRIPTION>符号不匹配:  已将“unsigned long”作为 _Param_(4) 传递，但需要使用一些 signed 类型来调用“_swprintf”。</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnInitDialog</FUNCTION><DECORATED>?OnInitDialog@CDlgInitVacTst@@UAEHXZ</DECORATED><FUNCLINE>49</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>74</LINE><COLUMN>10</COLUMN></SFA><DEFECTCODE>6340</DEFECTCODE><DESCRIPTION>符号不匹配:  已将“unsigned long”作为 _Param_(5) 传递，但需要使用一些 signed 类型来调用“_swprintf”。</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnInitDialog</FUNCTION><DECORATED>?OnInitDialog@CDlgInitVacTst@@UAEHXZ</DECORATED><FUNCLINE>49</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>59</LINE><COLUMN>28</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>考虑使用“GetTickCount64”而不是“GetTickCount”。原因:  GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnInitDialog</FUNCTION><DECORATED>?OnInitDialog@CDlgInitVacTst@@UAEHXZ</DECORATED><FUNCLINE>49</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>149</LINE><COLUMN>17</COLUMN></SFA><DEFECTCODE>6340</DEFECTCODE><DESCRIPTION>符号不匹配:  已将“unsigned long”作为 _Param_(3) 传递，但需要使用一些 signed 类型来调用“_swprintf”。</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnTimer</FUNCTION><DECORATED>?OnTimer@CDlgInitVacTst@@QAEXI@Z</DECORATED><FUNCLINE>81</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>238</LINE><COLUMN>17</COLUMN></SFA><DEFECTCODE>6340</DEFECTCODE><DESCRIPTION>符号不匹配:  已将“unsigned long”作为 _Param_(3) 传递，但需要使用一些 signed 类型来调用“_swprintf”。</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnTimer</FUNCTION><DECORATED>?OnTimer@CDlgInitVacTst@@QAEXI@Z</DECORATED><FUNCLINE>81</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>97</LINE><COLUMN>27</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>考虑使用“GetTickCount64”而不是“GetTickCount”。原因:  GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnTimer</FUNCTION><DECORATED>?OnTimer@CDlgInitVacTst@@QAEXI@Z</DECORATED><FUNCLINE>81</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>145</LINE><COLUMN>28</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>考虑使用“GetTickCount64”而不是“GetTickCount”。原因:  GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnTimer</FUNCTION><DECORATED>?OnTimer@CDlgInitVacTst@@QAEXI@Z</DECORATED><FUNCLINE>81</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>146</LINE><COLUMN>27</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>考虑使用“GetTickCount64”而不是“GetTickCount”。原因:  GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnTimer</FUNCTION><DECORATED>?OnTimer@CDlgInitVacTst@@QAEXI@Z</DECORATED><FUNCLINE>81</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>149</LINE><COLUMN>77</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>考虑使用“GetTickCount64”而不是“GetTickCount”。原因:  GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnTimer</FUNCTION><DECORATED>?OnTimer@CDlgInitVacTst@@QAEXI@Z</DECORATED><FUNCLINE>81</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>235</LINE><COLUMN>28</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>考虑使用“GetTickCount64”而不是“GetTickCount”。原因:  GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnTimer</FUNCTION><DECORATED>?OnTimer@CDlgInitVacTst@@QAEXI@Z</DECORATED><FUNCLINE>81</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>236</LINE><COLUMN>27</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>考虑使用“GetTickCount64”而不是“GetTickCount”。原因:  GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnTimer</FUNCTION><DECORATED>?OnTimer@CDlgInitVacTst@@QAEXI@Z</DECORATED><FUNCLINE>81</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>d:\oa\optorun assistant\</FILEPATH><FILENAME>dlginitvactst.cpp</FILENAME><LINE>238</LINE><COLUMN>77</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>考虑使用“GetTickCount64”而不是“GetTickCount”。原因:  GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>CDlgInitVacTst::OnTimer</FUNCTION><DECORATED>?OnTimer@CDlgInitVacTst@@QAEXI@Z</DECORATED><FUNCLINE>81</FUNCLINE><PATH/></DEFECT></DEFECTS>